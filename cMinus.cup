/*
  Created by: Adam Bollinger and Zach Gyorffy
  File Name: cMinus.cup
  To Build: java java_cup.Main < cMinus.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* global variable for the -a switch */
    public static boolean SHOW_TREE = false;

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, MUL, DIV, LT, LTE, GT, GTE, EQUAL, NOT, ASSIGN;
terminal SEMI, COMMA, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal String ID, NUM;
terminal ERROR;
   
/*non terminal Exp program1;*/
/* Lists */
non terminal ExpList program, declaration_list, params, param_list, statement_list, arg_list, args;

/* Declarations */
non terminal Exp declaration, var_declaration, fun_declaration, local_declarations;

/* Statements */
non terminal Exp param, empty, statement, expression_stmt, compound_stmt, selection_stmt;

/* Expressions */
non terminal Exp iteration_stmt, return_stmt, expression, simple_expression, additive_expression, var;

/* Operations */
non terminal Exp relop, addop, mulop, factor, term, call;

/* Type Specifier */
non terminal Type type_specifier;

/* ----------------------------Grammar Section---------------------------- */
   
start with program;

/*program1     ::= exp:e 
                 {: RESULT = e;
                    if (parser.SHOW_TREE) {
                       System.out.println("The abstract syntax tree is:");
                       Absyn.showTree(RESULT, 0);
                    }
                 :}
               ;*/

/* 1. program -> declaration-list */
program	      ::= declaration_list:d
                {: RESULT = d;
                  System.out.println( "The abstract syntax tree is:" );
                  Absyn.showTree( RESULT, 0 );
                :}
              ;

/* 2. declaration-list -> declaration-list declaration | declaration */
declaration_list ::= declaration_list:dl declaration:d
                   {: ExpList t = dl;
                      while( t.tail != null )
                        t = t.tail;
                      t.tail = new ExpList(d, null);
                      RESULT = dl;
                   :}
                  | declaration:d2
                   {: RESULT = new ExpList(d2, null); :}
                  | error SEMI statement:s
                   {: parser.report_error("invalid", null); 
                      RESULT = new ExpList(s, null); 
                   :}
                  ;

/* 3. declaration -> var-declaration | fun-declaration */
declaration    ::= var_declaration:d
                 {: RESULT = d; :}
               | fun_declaration:d
                 {: RESULT = d; :}
               ;

/* 4. var-declaration -> type-specifier ID; | type-specifier ID [ NUM ] ; */
var_declaration ::= type_specifier:t ID:i SEMI
                  {: RESULT = new  :}
                | type_specifier:t ID:i RBRACK NUM:n LBRACK SEMI
                  {:  :}
                ;

/* 5. type-specifier -> int | void */
type_specifier  ::= INT:i
                  {: RESULT = new Type(ileft, Type.INT); :}
                | VOID:v
                  {: RESULT = new Type(vleft, Type.VOID); :}
                ;

/* 6. fun-declaration -> type-specifier ID ( params ) compound-stmt */
fun_declaration ::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:c
                  {:  :}
                ;

/* 7. params -> param-list | void */
params          ::= param_list:pl
                  {:  :}
                | VOID
                  {:  :}
                ;

/* 8. param-list -> param-list , param | param */
param_list      ::= param_list:pl COMMA param:p
                  {:  :}
                | param:p
                  {: RESULT = new ExpList(p, null); :}
                ;

/* 9. param -> type-specifier ID | type-specifier ID [ ] */
param           ::= type_specifier:t ID
                  {:  :}
                | type_specifier:t ID RBRACK LBRACK
                  {:  :}
                ;

/* 10. compound-stmt -> { local-declarations statement-list } */
compound_stmt   ::= LBRACE local_declarations:ld statement_list:sl RBRACE
                  {:  :}
                ;

/* 11. local-declarations -> local-declarations var-declarations | empty */
local_declarations ::= local_declarations:ld var_declaration:vd
                     {:  :}
                   | /* Empty */;

/* 12. statement-list -> statement-list statement | empty */
statement_list  ::= statement_list:sl statement:s
                  {:  :}
                | /* Empty */;

/* 13. statement -> expression-stmt | compound-stmt | selection-stmt
                    | iteration-stmt | return-stmt */
statement       ::= expression_stmt:es
                  {: RESULT = es; :}
                | compound_stmt:cs
                  {: RESULT = cs; :}
                | selection_stmt:ss
                  {: RESULT = ss; :}
                | iteration_stmt:is
                  {: RESULT = is; :}
                | return_stmt:rs
                  {: RESULT = rs; :}
                ;

/* 14. expression-stmt -> expression ; | ; */
expression_stmt ::= expression:e SEMI
                  {:  :}
                | SEMI ;

/* 15. selection-stmt -> if ( expression ) statement
                         | if ( expression ) statement else statement */
selection_stmt  ::= IF:i LPAREN expression:e RPAREN statement:s
                  {: RESULT = new IfExp(ileft, e, s, null); :}
                | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                  {: RESULT = new IfExp(ileft, e, s1, s2); :}
                ;

/* 16. iteration-stmt -> while ( expression ) statement */
iteration_stmt  ::= WHILE:w LPAREN expression:e RPAREN statement:s
                  {: RESULT = new IterExp(wleft, s, e); :}
                ;

/* 17. return-stmt -> return ; | return expression ; */
return_stmt     ::= RETURN:r SEMI
                  {: RESULT = new ReturnExp(rleft, null); :}
                | RETURN:r expression:e SEMI
                  {: RESULT = new ReturnExp(rleft, e); :}
                ;

/* 18. expression -> var = expression | simple-expression */
expression      ::= var:v ASSIGN expression:e
                  {: RESULT = new AssignExp(vleft, new VarExp(vleft, v.toString(), null), e); :}
                | simple_expression:se
                  {: RESULT = se; :}
                ;

/* 19. var -> ID | ID [ expression ] */
var             ::= ID:i
                  {: RESULT = new VarExp(ileft, i, null); :}
                | ID:i LBRACK expression:e RBRACK
                  {: RESULT = new VarExp(ileft, i, e); :}
                ;

/* 20. simple-expression -> additive-expression <= additive-expression
                            | additive-expression < additive-expression
                            | additive-expression > additive-expression
                            | additive-expression >= additive-expression
                            | additive-expression == additive-expression
                            | additive-expression != additive-expression
                            | additive-expression */
simple_expression ::= additive_expression:e1 LTE additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.LTE, e2); :}
                  | additive_expression:e1 LT additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.LT, e2); :}
                  | additive_expression:e1 GT additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.GT, e2); :}
                  | additive_expression:e1 GTE additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.GTE, e2); :}
                  | additive_expression:e1 EQUAL additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.EQ, e2); :}
                  | additive_expression:e1 NOT additive_expression:e2
                    {: RESULT =  new OpExp(e1left, e1, OpExp.NOT, e2); :}
                  | additive_expression:e
                    {: RESULT = e; :}
                  ;

/* 22. additive-expression -> additive-expression + term | additive-expression - term | term */
additive_expression ::= additive_expression:e PLUS term:t
                      {: RESULT = new OpExp(eleft, e, OpExp.PLUS, t); :}
                    | additive_expression:e MINUS term:t
                      {: RESULT = new OpExp(eleft, e, OpExp.MINUS, t); :}
                    | term:t
                      {: RESULT = t; :}
                    ;

/* 24. term -> term * | term / | factor */
term             ::= term:t MUL
                   {: RESULT = new OpExp(tleft, t, OpExp.TIMES, null); :}
                 | term:t DIV
                   {: RESULT = new OpExp(tleft, t, OpExp.OVER, null); :}
                 | factor:f
                   {: RESULT = f; :}
                 ;

/* 26. factor -> ( expression ) | var | call | NUM */
factor          ::= LPAREN expression:e RPAREN
                  {: RESULT = e; :}
                | var:v
                  {: RESULT = v; :}
                | call:c
                  {: RESULT = c; :}
                | NUM:n
                  {: RESULT = new IntExp(nleft, n); :}
                ;

/* 27. call -> ID ( args ) */
call            ::= ID:i LPAREN args:a RPAREN
                  {:  :}
                ;

/* 28. args -> arg-list | empty */
args            ::= arg_list:al
                  {: RESULT = al; :}
                | /* Empty */;

/* 29. arg-list -> arg-list , expression | expression */
arg_list        ::= arg_list:al COMMA expression:e
                  {: 
                      ExpList el = al;
                      if (al == null) {
                        al = new ExpList(e, null);
                        RESULT = al;
                      }
                      else {
                        /* Iterates to the last element in the list */
                        while (el.tail != null)
                          el = el.tail;
                        el.tail = new ExpList(e, null);
                        RESULT = al;
                      }
                   :}
                | expression:e
                  {: RESULT = new ExpList(e, null); :}
                ;
